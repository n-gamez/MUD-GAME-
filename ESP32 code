//TCP for sending user input
//MQTT for receiving room descriptions
//MQTT for tracking key item

#include <WiFi.h>
#include <PubSubClient.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <cstdlib>
#include <Keypad.h>

#define SDA 33 //Define SDA pins
#define SCL 32 //Define SCL pins

LiquidCrystal_I2C lcd(0x27,16,2); 
WiFiClient espClient;
PubSubClient client(espClient);
WiFiClient tcpClient;

const char* ssid = "wifiname"; //wifi name
const char* password = "password";  //wifi psswrd
const char* mqttServer = "ducklingtrend.duckdns.org";  //gcp ip
const char* tcpServer = "ducklingtrend.duckdns.org";  //gcp ip
const char* mqttClientName = "esp32clientttt"; //esp32 name

const int mqttPort =1883;
const int tcpPort =8888;
const char* mqttRoomDescription = "roomDesc";
const char* mqttDirectionalInput="directInput";
const char* mqttItemFound ="itemFound";  //bash script can tell esp32 when item is picked, used, or ask if player has it
const char* mqttItemReply="itemReply"; //esp32 can tell bash script if the player has the item 
bool itemFound=false;

char keys[4][4] = {
 {'1', '2', '3', 'A'},
 {'4', '5', '6', 'B'},
 {'7', '8', '9', 'C'},
 {'*', '0', '#', 'D'}
};
byte rowPins[4] = {14, 27, 26, 25}; // connect to the row pinouts of the keypad
byte colPins[4] = {13, 21, 22, 23}; // connect to the column pinouts of the keypad
Keypad myKeypad = Keypad(makeKeymap(keys), rowPins, colPins, 4, 4);

String lcdTop;
String lcdBottom;

void setup() {
   Wire.begin(SDA, SCL); // attach the IIC pin
  if (!i2CAddrTest(0x27)) {
    lcd = LiquidCrystal_I2C(0x3F, 16, 2);
  }

  lcd.init(); // LCD driver initialization
  lcd.backlight(); // Open the backlight

  Serial.begin(115200);
  connectToWiFi();
  connectToMQTT();

  lcd.clear();
  lcdTop ="You wake up in";  //this is just how i start my games story
  lcdBottom ="a dark room";
  lcd.setCursor(0,0);
  lcd.print(lcdTop);
  lcd.setCursor(0,1); 
  lcd.print(lcdBottom);
  delay(4000);

  lcd.clear();
  lcdTop ="You feel someone";
  lcdBottom ="is watching you";
  lcd.setCursor(0,0);
  lcd.print(lcdTop);
  lcd.setCursor(0,1); 
  lcd.print(lcdBottom);
  delay(4000);

  lcd.clear();
  lcdTop ="I better get out";
  lcdBottom ="of here quick...";
  lcd.setCursor(0,0);
  lcd.print(lcdTop);
  lcd.setCursor(0,1); 
  lcd.print(lcdBottom);
  delay(4000);

  lcd.clear();
  lcdTop ="2=North 4=West";  //explain the controls
  lcdBottom ="6=East 8=South";
  lcd.setCursor(0,0);
  lcd.print(lcdTop);
  lcd.setCursor(0,1); 
  lcd.print(lcdBottom);

}

void loop() {
  if (!client.connected()) {
      reconnect();
  }

  char keyPressed = myKeypad.getKey();
  if (keyPressed) {
    Serial.println(keyPressed);
    sendToServer(keyPressed);
    delay(750);
  }
  client.loop();
}

void callback(char *topic, byte *payload, unsigned int length) {

  Serial.println("Message arrived");
  Serial.print("Topic: ");
  Serial.println(topic);

  String message = "";
  for (int i = 0; i < length; i++) {   //parse the message
    message += (char)payload[i];
  }

  Serial.print("Message: ");
  Serial.println(message);

  if (strcmp(topic, "roomDesc") == 0){  //received a room despription
    if (message.length() >= 16) {
  
      lcdTop = message.substring(0, 16);
      lcdBottom = message.substring(16);
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(lcdTop);
      lcd.setCursor(0,1); 
      lcd.print(lcdBottom);

    } else {

      lcdTop = message;
      lcdBottom = "";
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(lcdTop);
    }
  }
  else if(strcmp(topic, "itemFound")==0){ //received data concerning key item
    if(message=="itemFound"){ //player picked up item
      itemFound=true;
    }
    else if(message=="itemLost"){ //player used the item
      itemFound=false;
    }
    else if(message=="?"){  // bash script asks if player has the item
      String reply;
      if(itemFound==true){
        reply="true";
      }
      if(itemFound==false){
        reply="false";
      }
      client.publish(mqttItemReply, reply.c_str());  //tell the bash script if player has the item
    }
  }
}

void connectToWiFi() {
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("\nConnected to WiFi");
}

void connectToMQTT() {
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);  // Set the callback function
  Serial.println("Attempting to connect to MQTT Broker...");

  if (client.connect(mqttClientName)) {
    Serial.println("Connected to MQTT Broker");
    client.subscribe(mqttRoomDescription);
    client.subscribe(mqttItemFound);
  } 
  else {
    Serial.print("Failed to connect to MQTT Broker, rc=");
    Serial.print(client.state());
    Serial.println(" Retrying in 5 seconds...");
    delay(5000);
  }
}

void reconnect() {
  Serial.println("Connection lost. Reconnecting to MQTT Broker...");
  connectToMQTT();
}

void sendToServer(char key) {
  if (tcpClient.connect(tcpServer, tcpPort)) {
    Serial.println("Connected to server");
    tcpClient.write(key); //send the player input to the server
    tcpClient.stop();
  } 
  else {
    Serial.println("Connection to server failed");
  }
}

bool i2CAddrTest(uint8_t addr) {
 Wire.begin();
 Wire.beginTransmission(addr);
 if (Wire.endTransmission() == 0) {
 return true;
 }
 return false;
}
